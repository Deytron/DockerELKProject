version: "3.9"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - "--providers.docker.watch"
      - --entrypoints.web.address=:80
      - "--metrics.prometheus=true"
      - --ping
      # - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.myrouter.entrypoints=web"
      - "traefik.http.services.myservice.loadbalancer.server.port=80"
    restart: unless-stopped
    healthcheck:
      test: traefik healthcheck --ping
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 10s

  ##########################
  jellyfin:
    image: linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    volumes:
      - ./jellyfin/config:/config
      - ./downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.localhost`)"
      - "traefik.http.routers.jellyfin.entrypoints=web"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/web/index.html"]
      interval: 1m
      timeout: 10s
      retries: 3

  ############################
  # Download stack
  ############################
  prowlarr:
    image: linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./prowlarr/config:/config
      - ./prowlarr/downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.localhost`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    healthcheck:
      test: curl www.google.com || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  ############################
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./sonarr/config:/config
      - ./downloads:/downloads
    depends_on:
      - prowlarr
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.localhost`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    healthcheck:
      test: curl www.google.com || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  ############################
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - RADARR_METRICS=true
    volumes:
      - ./radarr/config:/config
      - ./downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.localhost`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    depends_on:
      - prowlarr
    restart: unless-stopped
    healthcheck:
      test: curl www.google.com || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  ############################
  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./lidarr/config:/config
      - ./lidarr/downloads:/downloads
      - ./lidarr/music:/music
      - ./downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.localhost`)"
      - "traefik.http.routers.lidarr.entrypoints=web"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
    depends_on:
      - prowlarr
    restart: unless-stopped
    healthcheck:
      test: curl www.google.com || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  #############################
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - USER=user
      - PASSWORD=password
    volumes:
      - ./transmission/config:/config
      - ./transmission/torrents:/torrents
      - ./downloads:/downloads
    ports:
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`transmission.localhost`)"
      - "traefik.http.routers.transmission.entrypoints=web"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://transmission:9091"]
      interval: 1m
      timeout: 10s
      retries: 3
  ###################
  # MONITORING STACK
  #################
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=Root123
    depends_on:
      - prometheus
    volumes:
      - ./grafana/config:/etc/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
  #################
  # ARR AND OTHER EXPORTERS
  ###############
  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: sonarre
    command: ["sonarr"]
    environment:
      PORT: 9707
      URL: "http://sonarr:8989"
      APIKEY: "6fb7dfa755e3470e866a3ae28a8ad153"
    ports:
      - "9707:9707"
  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: radarre
    command: ["radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr:7878"
      APIKEY: "4beaf472f9714540b959140b5ae4fccc"
    ports:
      - "9708:9708"
  lidarr-exporter:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: lidarre
    command: ["lidarr"]
    environment:
      PORT: 9709
      URL: "http://lidarr:8686"
      APIKEY: "8e4a02baae5d4f42a7fe4fb0252a6e5d"
    ports:
      - "9709:9709"
  transmission-exporter:
    image: metalmatze/transmission-exporter
    container_name: transmissione
    restart: unless-stopped
    links:
      - transmission
    ports:
      - "19091:19091"
    environment:
      TRANSMISSION_ADDR: http://transmission:9091
